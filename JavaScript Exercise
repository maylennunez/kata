// Dogs age in human age

var dogAge = prompt("How old is your dog?");
var humanAge = (dogAge - 2) * 4 + 21
alert("Your dog is " + humanAge + " years old in human years.");


/* Write a JavaScript program which prints the elements of the following array. Go to the editor
Note : Use nested for loops.
Sample array : var a = [[1, 2, 1, 24], [8, 11, 9, 4], [7, 0, 7, 27], [7, 4, 28, 14], [3, 10, 26, 7]];
Sample Output :
"row 0"
" 1"
" 2"
" 1"
" 24"
 "row 1" */

var a = [[1, 2, 1, 24], [8, 11, 9, 4], [7, 0, 7, 27], [7, 4, 28, 14], [3, 10, 26, 7]];
 
for (var i in a) 
{
   console.log("row " + i);
   for (var j in a[i]) 
     {
      console.log(" " + a[i][j]);
     }
}





//Create your function below this line.
//The first parameter should be the weight and the second should be the height.

function bmiCalculator(weight, height){
    var bmi = weight / Math.pow(height, 2);

    if (bmi < 18.5){
    return "Your BMI is " + bmi + ", so you are underweight.";
    }
    if (bmi >= 18.5 && bmi <= 24.9){
    return "Your BMI is " + bmi + ", so you have a normal weight.";
    }
    if (bmi > 24.9){
    return "Your BMI is " + bmi + ", so you are overweight.";

    }

}

bmiCalculator(65,1.8);
} 

/* If my weight is 65Kg and my height is 1.8m, I should be able to call your function like this:

var bmi = bmiCalculator(65, 1.8); 

bmi should equal 20 when it's rounded to the nearest whole number.

*/


// Write a program thats prints the numbers from 1 to 100. But for multiples of three print "Fizz" intead of the number and for the multiples of five print "Buzz". For number which are multiples of both three and five print "FizzBuzz".//



var output = [];
var count = 1;

function FizzBuzz() {
if (count % 3 === 0 && count % 5 === 0){
   output.push("FizzBuzz");
}
else if (count % 3 === 0) {
    output.push("Fizz");
} 
else if (count % 5 === 0) {
    output.push("Buzz");
} 
else {
    output.push(count);
}
count++;

   console.log(output)
}



   // WHO'S BUYING LUNCH?//
   
Write a function which will select a random name from a list of names. The person selected will have to pay for everybody's food bill.

Example input
["Angela", "Ben", "Jenny", "Michael", "Chloe"]

Output
Michael is going to buy lunch today!


function whosPaying(names) {

var numberOfPeople = names.lenght;
var randomPersonPosition = Math.floor(Math.random() * numberOfPeople);
var randomPerson = names[randonPersonPosition];

return randomPerson + "is going to buy lunch today!";
}


//Define a method/function that removes from a given array of integers all the values contained in a second array.
l = List()

//integer_list =  [1, 1, 2 ,3 ,1 ,2 ,3 ,4]
//values_list = [1, 3]
//l.remove_(integer_list, values_list) == [2, 2, 4]


Array.prototype.remove_ = function(integer_list, values_list){
  //your code here
  return integer_list.filter(function (element) {
    return values_list.indexOf(element) === -1;
  });
}


//Implement a function, multiples(m, n), which returns an array of the first m multiples of the real number n. Assume that m is a positive integer.

function multiples(m, n){
  
  // code here
  var num = [];
for (var i = 1; i <=m; ++i) 
  num.push(n*i);
return num;
}




//.  Calculate the final score of the game using original Nintendo scoring system

Input

Array with cleaned lines.
Example: [4, 2, 2, 3, 3, 4, 2]
Input will always be valid: array of random length (from 0 to 5000) with numbers from 0 to 4.

Ouput

Calculated final score.
def get_score(arr) -> int: return 0

Example

getScore([4, 2, 2, 3, 3, 4, 2]); // returns 4900
Step 1: +1200 points for 4 lines (current level 0). Score: 0+1200=1200;
Step 2: +100 for 2 lines. Score: 1200+100=1300;
Step 3: +100. Score: 1300+100=1400;
Step 4: +300 for 3 lines (current level still 0). Score: 1400+300=1700.
Total number of cleaned lines 11 (4 + 2 + 2 + 3), so level goes up to 1 (level ups each 10 lines);
Step 5: +600 for 3 lines (current level 1). Score: 1700+600=2300;
Step 6: +2400. Score: 2300+2400=4700;
Step 7: +200. Total score: 4700+200=4900 points.

function getScore(arr) {
   let score = 0,
       count = 0,
       sum = 0,
       level = 0;

   for(let i = 0; i < arr.length; i++) {
     count = count + arr[i];

     switch (arr[i]){
      case 0 : sum = 0;
             break;
      case 1 : sum = 40 + 40*level;
              break;
      case 2 : sum = 100 + 100*level;
              break;   
      case 3 : sum = 300 + 300*level;
              break;    
      case 4 : sum = 1200 + 1200*level;
              break;        
     }
     score = score + sum;
        if (count >= 10) {
        count = count - 10;
        level++;
      }
   }

  return score;
}




var points = [40, 100, 300, 46]

function myArrayMax(arr) {
  var len = arr.length;
  var max = -Infinity;
  while (len--) {
    if (arr[len] > max) {
      max = arr[len];
    }
  }
  return max;
}




// In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants?

At the end of the first year there will be: 
1000 + 1000 * 0.02 + 50 => 1070 inhabitants

At the end of the 2nd year there will be: 
1070 + 1070 * 0.02 + 50 => 1141 inhabitants (number of inhabitants is an integer)

At the end of the 3rd year there will be:
1141 + 1141 * 0.02 + 50 => 1213

It will need 3 entire years.
More generally given parameters:

p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)

the function nb_year should return n number of entire years needed to get a population greater or equal to p.

aug is an integer, percent a positive or null number, p0 and p are positive integers (> 0)

Examples:
nb_year(1500, 5, 100, 5000) -> 15
nb_year(1500000, 2.5, 10000, 2000000) -> 10
Note: Don't forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02. 

function nbYear(p0, percent, aug, p) {
    // variables needed
    var years   = 1,    
        percent = percent / 100,
        pCalc   = (p0 * (1 + percent)) + aug;
    
    // loop while calculated population is less than 
    // projected population and increment year and run
    // formula again.
    while (pCalc < p) {
      years++;
      pCalc = (pCalc * (1 + percent)) + aug;
    }
    
    // somehow i feel this funtion is highly inefficient
    return years;
}
  



//Let us practice the for loop with the factorial used in mathematics. The factorial of a positive integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example, 3! = 1*2*3 = 6. By definition, 0! = 1.
Exercise

Write a function factorial that calculates the factorial of a positive integer. factorial(3) should return 6.

var factorial = function(n) {
  var result = 1;
  for (var i = 1; i <= n; i++) {
    result = result * i;
  }
  return result;
};


   // parseInt//
Sometimes you want to read a number from a string. In case of an integer (..., -2, -1, 0, 1, 2, ..) you can use the parseInt function. The following examples return 19 or -19:
var n1 = parseInt('19', 10);
var n2 = parseInt('+19', 10);
var n3 = parseInt('-19', 10);
var n4 = parseInt('19 Grad', 10);
var n5 = parseInt('19.1', 10);
var n6 = parseInt('019', 10);
var n7 = parseInt(' 19', 10);
Besides the direct reading of integers with or without sign (n1, n2, n3), parseInt can also handle some more complex cases. Non-numeric characters after (n4, n5) as well as zeros (n6) and spaces (n7) before the integer will be ignored.

In all examples, the second parameter passed to parseInt is 10. This parameter specifies the radix (the base in mathematical numeral systems) on which the number is to be interpreted. 10 represents the usual decimal system. If you omit the second parameter, the decimal system is normally used as default. Since there are exceptions to this rule, you should always specify the radix!

If parseInt cannot read an integer, it returns NaN (Not a Number).
var n1 = parseInt('text', 10);
var n2 = parseInt('No. 10', 10);
In the first case there is no number at all. In the second case, there are non-numeric characters before the number. This is not allowed and results in NaN.

A detailed documentation of parseInt can be found at Mozilla web docs.
Exercise

Write a function add that takes a string with a summation task and returns its result as a number. Two natural numbers should be added. The summation task is a string of the form '102+17'. add('102+17') should return 119.


var add = function(s) {
  var summand1 = parseInt(s, 10);
  var positionPlus = s.indexOf('+');
  var sAfterPlus = s.substring(positionPlus + 1);
  var summand2 = parseInt(sAfterPlus, 10);
  return summand1 + summand2;
};

